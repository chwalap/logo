Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> word
Rule 1     word -> word NEWLINE
Rule 2     number -> NUMBER
Rule 3     word -> word + word
Rule 4     word -> word - word
Rule 5     word -> word * word
Rule 6     word -> word / word
Rule 7     word -> word % word
Rule 8     word -> word ^ word
Rule 9     word -> word = word
Rule 10    word -> word NOT_EQUAL word
Rule 11    word -> ( word )
Rule 12    word -> WORD
Rule 13    word -> number
Rule 14    word -> : WORD
Rule 15    word -> " WORD
Rule 16    word -> word word
Rule 17    empty -> <empty>

Terminals, with rules where they appear

"                    : 15
%                    : 7
(                    : 11
)                    : 11
*                    : 5
+                    : 3
-                    : 4
/                    : 6
:                    : 14
=                    : 9
NEWLINE              : 1
NOT_EQUAL            : 10
NUMBER               : 2
WORD                 : 12 14 15
^                    : 8
error                : 

Nonterminals, with rules where they appear

empty                : 
number               : 13
word                 : 1 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 16 16 0

Parsing method: LALR

state 0

    (0) S' -> . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 1
    number                         shift and go to state 4

state 1

    (0) S' -> word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         shift and go to state 9
    +               shift and go to state 10
    -               shift and go to state 11
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    =               shift and go to state 16
    NOT_EQUAL       shift and go to state 17
    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 8
    number                         shift and go to state 4

state 2

    (11) word -> ( . word )
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 18
    number                         shift and go to state 4

state 3

    (12) word -> WORD .

    NEWLINE         reduce using rule 12 (word -> WORD .)
    +               reduce using rule 12 (word -> WORD .)
    -               reduce using rule 12 (word -> WORD .)
    *               reduce using rule 12 (word -> WORD .)
    /               reduce using rule 12 (word -> WORD .)
    %               reduce using rule 12 (word -> WORD .)
    ^               reduce using rule 12 (word -> WORD .)
    =               reduce using rule 12 (word -> WORD .)
    NOT_EQUAL       reduce using rule 12 (word -> WORD .)
    (               reduce using rule 12 (word -> WORD .)
    WORD            reduce using rule 12 (word -> WORD .)
    :               reduce using rule 12 (word -> WORD .)
    "               reduce using rule 12 (word -> WORD .)
    NUMBER          reduce using rule 12 (word -> WORD .)
    $end            reduce using rule 12 (word -> WORD .)
    )               reduce using rule 12 (word -> WORD .)


state 4

    (13) word -> number .

    NEWLINE         reduce using rule 13 (word -> number .)
    +               reduce using rule 13 (word -> number .)
    -               reduce using rule 13 (word -> number .)
    *               reduce using rule 13 (word -> number .)
    /               reduce using rule 13 (word -> number .)
    %               reduce using rule 13 (word -> number .)
    ^               reduce using rule 13 (word -> number .)
    =               reduce using rule 13 (word -> number .)
    NOT_EQUAL       reduce using rule 13 (word -> number .)
    (               reduce using rule 13 (word -> number .)
    WORD            reduce using rule 13 (word -> number .)
    :               reduce using rule 13 (word -> number .)
    "               reduce using rule 13 (word -> number .)
    NUMBER          reduce using rule 13 (word -> number .)
    $end            reduce using rule 13 (word -> number .)
    )               reduce using rule 13 (word -> number .)


state 5

    (14) word -> : . WORD

    WORD            shift and go to state 19


state 6

    (15) word -> " . WORD

    WORD            shift and go to state 20


state 7

    (2) number -> NUMBER .

    NEWLINE         reduce using rule 2 (number -> NUMBER .)
    +               reduce using rule 2 (number -> NUMBER .)
    -               reduce using rule 2 (number -> NUMBER .)
    *               reduce using rule 2 (number -> NUMBER .)
    /               reduce using rule 2 (number -> NUMBER .)
    %               reduce using rule 2 (number -> NUMBER .)
    ^               reduce using rule 2 (number -> NUMBER .)
    =               reduce using rule 2 (number -> NUMBER .)
    NOT_EQUAL       reduce using rule 2 (number -> NUMBER .)
    (               reduce using rule 2 (number -> NUMBER .)
    WORD            reduce using rule 2 (number -> NUMBER .)
    :               reduce using rule 2 (number -> NUMBER .)
    "               reduce using rule 2 (number -> NUMBER .)
    NUMBER          reduce using rule 2 (number -> NUMBER .)
    $end            reduce using rule 2 (number -> NUMBER .)
    )               reduce using rule 2 (number -> NUMBER .)


state 8

    (16) word -> word word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 16 (word -> word word .)
    WORD            reduce using rule 16 (word -> word word .)
    NUMBER          reduce using rule 16 (word -> word word .)
    $end            reduce using rule 16 (word -> word word .)
    )               reduce using rule 16 (word -> word word .)
    +               shift and go to state 10
    -               shift and go to state 11
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    =               shift and go to state 16
    NOT_EQUAL       shift and go to state 17
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! +               [ reduce using rule 16 (word -> word word .) ]
  ! -               [ reduce using rule 16 (word -> word word .) ]
  ! *               [ reduce using rule 16 (word -> word word .) ]
  ! /               [ reduce using rule 16 (word -> word word .) ]
  ! %               [ reduce using rule 16 (word -> word word .) ]
  ! ^               [ reduce using rule 16 (word -> word word .) ]
  ! =               [ reduce using rule 16 (word -> word word .) ]
  ! NOT_EQUAL       [ reduce using rule 16 (word -> word word .) ]
  ! (               [ reduce using rule 16 (word -> word word .) ]
  ! :               [ reduce using rule 16 (word -> word word .) ]
  ! "               [ reduce using rule 16 (word -> word word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 9

    (1) word -> word NEWLINE .

    NEWLINE         reduce using rule 1 (word -> word NEWLINE .)
    +               reduce using rule 1 (word -> word NEWLINE .)
    -               reduce using rule 1 (word -> word NEWLINE .)
    *               reduce using rule 1 (word -> word NEWLINE .)
    /               reduce using rule 1 (word -> word NEWLINE .)
    %               reduce using rule 1 (word -> word NEWLINE .)
    ^               reduce using rule 1 (word -> word NEWLINE .)
    =               reduce using rule 1 (word -> word NEWLINE .)
    NOT_EQUAL       reduce using rule 1 (word -> word NEWLINE .)
    (               reduce using rule 1 (word -> word NEWLINE .)
    WORD            reduce using rule 1 (word -> word NEWLINE .)
    :               reduce using rule 1 (word -> word NEWLINE .)
    "               reduce using rule 1 (word -> word NEWLINE .)
    NUMBER          reduce using rule 1 (word -> word NEWLINE .)
    $end            reduce using rule 1 (word -> word NEWLINE .)
    )               reduce using rule 1 (word -> word NEWLINE .)


state 10

    (3) word -> word + . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 21
    number                         shift and go to state 4

state 11

    (4) word -> word - . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 22
    number                         shift and go to state 4

state 12

    (5) word -> word * . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 23
    number                         shift and go to state 4

state 13

    (6) word -> word / . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 24
    number                         shift and go to state 4

state 14

    (7) word -> word % . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 25
    number                         shift and go to state 4

state 15

    (8) word -> word ^ . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 26
    number                         shift and go to state 4

state 16

    (9) word -> word = . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 27
    number                         shift and go to state 4

state 17

    (10) word -> word NOT_EQUAL . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 28
    number                         shift and go to state 4

state 18

    (11) word -> ( word . )
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    )               shift and go to state 29
    NEWLINE         shift and go to state 9
    +               shift and go to state 10
    -               shift and go to state 11
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    =               shift and go to state 16
    NOT_EQUAL       shift and go to state 17
    (               shift and go to state 2
    WORD            shift and go to state 3
    :               shift and go to state 5
    "               shift and go to state 6
    NUMBER          shift and go to state 7

    word                           shift and go to state 8
    number                         shift and go to state 4

state 19

    (14) word -> : WORD .

    NEWLINE         reduce using rule 14 (word -> : WORD .)
    +               reduce using rule 14 (word -> : WORD .)
    -               reduce using rule 14 (word -> : WORD .)
    *               reduce using rule 14 (word -> : WORD .)
    /               reduce using rule 14 (word -> : WORD .)
    %               reduce using rule 14 (word -> : WORD .)
    ^               reduce using rule 14 (word -> : WORD .)
    =               reduce using rule 14 (word -> : WORD .)
    NOT_EQUAL       reduce using rule 14 (word -> : WORD .)
    (               reduce using rule 14 (word -> : WORD .)
    WORD            reduce using rule 14 (word -> : WORD .)
    :               reduce using rule 14 (word -> : WORD .)
    "               reduce using rule 14 (word -> : WORD .)
    NUMBER          reduce using rule 14 (word -> : WORD .)
    $end            reduce using rule 14 (word -> : WORD .)
    )               reduce using rule 14 (word -> : WORD .)


state 20

    (15) word -> " WORD .

    NEWLINE         reduce using rule 15 (word -> " WORD .)
    +               reduce using rule 15 (word -> " WORD .)
    -               reduce using rule 15 (word -> " WORD .)
    *               reduce using rule 15 (word -> " WORD .)
    /               reduce using rule 15 (word -> " WORD .)
    %               reduce using rule 15 (word -> " WORD .)
    ^               reduce using rule 15 (word -> " WORD .)
    =               reduce using rule 15 (word -> " WORD .)
    NOT_EQUAL       reduce using rule 15 (word -> " WORD .)
    (               reduce using rule 15 (word -> " WORD .)
    WORD            reduce using rule 15 (word -> " WORD .)
    :               reduce using rule 15 (word -> " WORD .)
    "               reduce using rule 15 (word -> " WORD .)
    NUMBER          reduce using rule 15 (word -> " WORD .)
    $end            reduce using rule 15 (word -> " WORD .)
    )               reduce using rule 15 (word -> " WORD .)


state 21

    (3) word -> word + word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 3 (word -> word + word .)
    +               reduce using rule 3 (word -> word + word .)
    -               reduce using rule 3 (word -> word + word .)
    =               reduce using rule 3 (word -> word + word .)
    NOT_EQUAL       reduce using rule 3 (word -> word + word .)
    WORD            reduce using rule 3 (word -> word + word .)
    NUMBER          reduce using rule 3 (word -> word + word .)
    $end            reduce using rule 3 (word -> word + word .)
    )               reduce using rule 3 (word -> word + word .)
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! *               [ reduce using rule 3 (word -> word + word .) ]
  ! /               [ reduce using rule 3 (word -> word + word .) ]
  ! %               [ reduce using rule 3 (word -> word + word .) ]
  ! ^               [ reduce using rule 3 (word -> word + word .) ]
  ! (               [ reduce using rule 3 (word -> word + word .) ]
  ! :               [ reduce using rule 3 (word -> word + word .) ]
  ! "               [ reduce using rule 3 (word -> word + word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 22

    (4) word -> word - word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 4 (word -> word - word .)
    +               reduce using rule 4 (word -> word - word .)
    -               reduce using rule 4 (word -> word - word .)
    =               reduce using rule 4 (word -> word - word .)
    NOT_EQUAL       reduce using rule 4 (word -> word - word .)
    WORD            reduce using rule 4 (word -> word - word .)
    NUMBER          reduce using rule 4 (word -> word - word .)
    $end            reduce using rule 4 (word -> word - word .)
    )               reduce using rule 4 (word -> word - word .)
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! *               [ reduce using rule 4 (word -> word - word .) ]
  ! /               [ reduce using rule 4 (word -> word - word .) ]
  ! %               [ reduce using rule 4 (word -> word - word .) ]
  ! ^               [ reduce using rule 4 (word -> word - word .) ]
  ! (               [ reduce using rule 4 (word -> word - word .) ]
  ! :               [ reduce using rule 4 (word -> word - word .) ]
  ! "               [ reduce using rule 4 (word -> word - word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 23

    (5) word -> word * word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 5 (word -> word * word .)
    +               reduce using rule 5 (word -> word * word .)
    -               reduce using rule 5 (word -> word * word .)
    *               reduce using rule 5 (word -> word * word .)
    /               reduce using rule 5 (word -> word * word .)
    %               reduce using rule 5 (word -> word * word .)
    =               reduce using rule 5 (word -> word * word .)
    NOT_EQUAL       reduce using rule 5 (word -> word * word .)
    WORD            reduce using rule 5 (word -> word * word .)
    NUMBER          reduce using rule 5 (word -> word * word .)
    $end            reduce using rule 5 (word -> word * word .)
    )               reduce using rule 5 (word -> word * word .)
    ^               shift and go to state 15
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! ^               [ reduce using rule 5 (word -> word * word .) ]
  ! (               [ reduce using rule 5 (word -> word * word .) ]
  ! :               [ reduce using rule 5 (word -> word * word .) ]
  ! "               [ reduce using rule 5 (word -> word * word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 12 ]
  ! /               [ shift and go to state 13 ]
  ! %               [ shift and go to state 14 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 24

    (6) word -> word / word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 6 (word -> word / word .)
    +               reduce using rule 6 (word -> word / word .)
    -               reduce using rule 6 (word -> word / word .)
    *               reduce using rule 6 (word -> word / word .)
    /               reduce using rule 6 (word -> word / word .)
    %               reduce using rule 6 (word -> word / word .)
    =               reduce using rule 6 (word -> word / word .)
    NOT_EQUAL       reduce using rule 6 (word -> word / word .)
    WORD            reduce using rule 6 (word -> word / word .)
    NUMBER          reduce using rule 6 (word -> word / word .)
    $end            reduce using rule 6 (word -> word / word .)
    )               reduce using rule 6 (word -> word / word .)
    ^               shift and go to state 15
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! ^               [ reduce using rule 6 (word -> word / word .) ]
  ! (               [ reduce using rule 6 (word -> word / word .) ]
  ! :               [ reduce using rule 6 (word -> word / word .) ]
  ! "               [ reduce using rule 6 (word -> word / word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 12 ]
  ! /               [ shift and go to state 13 ]
  ! %               [ shift and go to state 14 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 25

    (7) word -> word % word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 7 (word -> word % word .)
    +               reduce using rule 7 (word -> word % word .)
    -               reduce using rule 7 (word -> word % word .)
    *               reduce using rule 7 (word -> word % word .)
    /               reduce using rule 7 (word -> word % word .)
    %               reduce using rule 7 (word -> word % word .)
    =               reduce using rule 7 (word -> word % word .)
    NOT_EQUAL       reduce using rule 7 (word -> word % word .)
    WORD            reduce using rule 7 (word -> word % word .)
    NUMBER          reduce using rule 7 (word -> word % word .)
    $end            reduce using rule 7 (word -> word % word .)
    )               reduce using rule 7 (word -> word % word .)
    ^               shift and go to state 15
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! ^               [ reduce using rule 7 (word -> word % word .) ]
  ! (               [ reduce using rule 7 (word -> word % word .) ]
  ! :               [ reduce using rule 7 (word -> word % word .) ]
  ! "               [ reduce using rule 7 (word -> word % word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 12 ]
  ! /               [ shift and go to state 13 ]
  ! %               [ shift and go to state 14 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 26

    (8) word -> word ^ word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 8 (word -> word ^ word .)
    +               reduce using rule 8 (word -> word ^ word .)
    -               reduce using rule 8 (word -> word ^ word .)
    *               reduce using rule 8 (word -> word ^ word .)
    /               reduce using rule 8 (word -> word ^ word .)
    %               reduce using rule 8 (word -> word ^ word .)
    ^               reduce using rule 8 (word -> word ^ word .)
    =               reduce using rule 8 (word -> word ^ word .)
    NOT_EQUAL       reduce using rule 8 (word -> word ^ word .)
    WORD            reduce using rule 8 (word -> word ^ word .)
    :               reduce using rule 8 (word -> word ^ word .)
    "               reduce using rule 8 (word -> word ^ word .)
    NUMBER          reduce using rule 8 (word -> word ^ word .)
    $end            reduce using rule 8 (word -> word ^ word .)
    )               reduce using rule 8 (word -> word ^ word .)
    (               shift and go to state 2

  ! (               [ reduce using rule 8 (word -> word ^ word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! +               [ shift and go to state 10 ]
  ! -               [ shift and go to state 11 ]
  ! *               [ shift and go to state 12 ]
  ! /               [ shift and go to state 13 ]
  ! %               [ shift and go to state 14 ]
  ! ^               [ shift and go to state 15 ]
  ! =               [ shift and go to state 16 ]
  ! NOT_EQUAL       [ shift and go to state 17 ]
  ! WORD            [ shift and go to state 3 ]
  ! :               [ shift and go to state 5 ]
  ! "               [ shift and go to state 6 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 27

    (9) word -> word = word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 9 (word -> word = word .)
    WORD            reduce using rule 9 (word -> word = word .)
    NUMBER          reduce using rule 9 (word -> word = word .)
    $end            reduce using rule 9 (word -> word = word .)
    )               reduce using rule 9 (word -> word = word .)
    +               shift and go to state 10
    -               shift and go to state 11
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    =               shift and go to state 16
    NOT_EQUAL       shift and go to state 17
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! +               [ reduce using rule 9 (word -> word = word .) ]
  ! -               [ reduce using rule 9 (word -> word = word .) ]
  ! *               [ reduce using rule 9 (word -> word = word .) ]
  ! /               [ reduce using rule 9 (word -> word = word .) ]
  ! %               [ reduce using rule 9 (word -> word = word .) ]
  ! ^               [ reduce using rule 9 (word -> word = word .) ]
  ! =               [ reduce using rule 9 (word -> word = word .) ]
  ! NOT_EQUAL       [ reduce using rule 9 (word -> word = word .) ]
  ! (               [ reduce using rule 9 (word -> word = word .) ]
  ! :               [ reduce using rule 9 (word -> word = word .) ]
  ! "               [ reduce using rule 9 (word -> word = word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 28

    (10) word -> word NOT_EQUAL word .
    (1) word -> word . NEWLINE
    (3) word -> word . + word
    (4) word -> word . - word
    (5) word -> word . * word
    (6) word -> word . / word
    (7) word -> word . % word
    (8) word -> word . ^ word
    (9) word -> word . = word
    (10) word -> word . NOT_EQUAL word
    (16) word -> word . word
    (1) word -> . word NEWLINE
    (3) word -> . word + word
    (4) word -> . word - word
    (5) word -> . word * word
    (6) word -> . word / word
    (7) word -> . word % word
    (8) word -> . word ^ word
    (9) word -> . word = word
    (10) word -> . word NOT_EQUAL word
    (11) word -> . ( word )
    (12) word -> . WORD
    (13) word -> . number
    (14) word -> . : WORD
    (15) word -> . " WORD
    (16) word -> . word word
    (2) number -> . NUMBER

    NEWLINE         reduce using rule 10 (word -> word NOT_EQUAL word .)
    WORD            reduce using rule 10 (word -> word NOT_EQUAL word .)
    NUMBER          reduce using rule 10 (word -> word NOT_EQUAL word .)
    $end            reduce using rule 10 (word -> word NOT_EQUAL word .)
    )               reduce using rule 10 (word -> word NOT_EQUAL word .)
    +               shift and go to state 10
    -               shift and go to state 11
    *               shift and go to state 12
    /               shift and go to state 13
    %               shift and go to state 14
    ^               shift and go to state 15
    =               shift and go to state 16
    NOT_EQUAL       shift and go to state 17
    (               shift and go to state 2
    :               shift and go to state 5
    "               shift and go to state 6

  ! +               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! -               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! *               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! /               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! %               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! ^               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! =               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! NOT_EQUAL       [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! (               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! :               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! "               [ reduce using rule 10 (word -> word NOT_EQUAL word .) ]
  ! NEWLINE         [ shift and go to state 9 ]
  ! WORD            [ shift and go to state 3 ]
  ! NUMBER          [ shift and go to state 7 ]

    word                           shift and go to state 8
    number                         shift and go to state 4

state 29

    (11) word -> ( word ) .

    NEWLINE         reduce using rule 11 (word -> ( word ) .)
    +               reduce using rule 11 (word -> ( word ) .)
    -               reduce using rule 11 (word -> ( word ) .)
    *               reduce using rule 11 (word -> ( word ) .)
    /               reduce using rule 11 (word -> ( word ) .)
    %               reduce using rule 11 (word -> ( word ) .)
    ^               reduce using rule 11 (word -> ( word ) .)
    =               reduce using rule 11 (word -> ( word ) .)
    NOT_EQUAL       reduce using rule 11 (word -> ( word ) .)
    (               reduce using rule 11 (word -> ( word ) .)
    WORD            reduce using rule 11 (word -> ( word ) .)
    :               reduce using rule 11 (word -> ( word ) .)
    "               reduce using rule 11 (word -> ( word ) .)
    NUMBER          reduce using rule 11 (word -> ( word ) .)
    $end            reduce using rule 11 (word -> ( word ) .)
    )               reduce using rule 11 (word -> ( word ) .)

