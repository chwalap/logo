
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'wordnonassocMERGE_WORDS_AT_THE_ENDright=NOT_EQUALleft+-left*/%right:"left^left()NEWLINE NOT_EQUAL NUMBER WORDword : word NEWLINEnumber : NUMBERword : word \'+\' word\n            | word \'-\' word\n            | word \'*\' word\n            | word \'/\' word\n            | word \'%\' word\n            | word \'^\' wordword : word \'=\' wordword : word NOT_EQUAL wordword : \'(\' word \')\' word : WORDword : numberword : \':\' WORDword : \'"\' WORDword : word word %prec MERGE_WORDS_AT_THE_ENDempty :'
    
_lr_action_items = {'(':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[2,2,2,-12,-13,-2,2,-1,2,2,2,2,2,2,2,2,2,-14,-15,2,2,2,2,2,2,2,2,-11,]),'WORD':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[3,3,3,-12,-13,19,20,-2,-16,-1,3,3,3,3,3,3,3,3,3,-14,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,]),':':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[5,5,5,-12,-13,-2,5,-1,5,5,5,5,5,5,5,5,5,-14,-15,5,5,5,5,5,-8,5,5,-11,]),'"':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[6,6,6,-12,-13,-2,6,-1,6,6,6,6,6,6,6,6,6,-14,-15,6,6,6,6,6,-8,6,6,-11,]),'NUMBER':([0,1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[7,7,7,-12,-13,-2,-16,-1,7,7,7,7,7,7,7,7,7,-14,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,]),'$end':([1,3,4,7,8,9,19,20,21,22,23,24,25,26,27,28,29,],[0,-12,-13,-2,-16,-1,-14,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,]),'NEWLINE':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[9,-12,-13,-2,-16,-1,9,-14,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,]),'+':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[10,-12,-13,-2,10,-1,10,-14,-15,-3,-4,-5,-6,-7,-8,10,10,-11,]),'-':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[11,-12,-13,-2,11,-1,11,-14,-15,-3,-4,-5,-6,-7,-8,11,11,-11,]),'*':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[12,-12,-13,-2,12,-1,12,-14,-15,12,12,-5,-6,-7,-8,12,12,-11,]),'/':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[13,-12,-13,-2,13,-1,13,-14,-15,13,13,-5,-6,-7,-8,13,13,-11,]),'%':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[14,-12,-13,-2,14,-1,14,-14,-15,14,14,-5,-6,-7,-8,14,14,-11,]),'^':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[15,-12,-13,-2,15,-1,15,-14,-15,15,15,15,15,15,-8,15,15,-11,]),'=':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[16,-12,-13,-2,16,-1,16,-14,-15,-3,-4,-5,-6,-7,-8,16,16,-11,]),'NOT_EQUAL':([1,3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[17,-12,-13,-2,17,-1,17,-14,-15,-3,-4,-5,-6,-7,-8,17,17,-11,]),')':([3,4,7,8,9,18,19,20,21,22,23,24,25,26,27,28,29,],[-12,-13,-2,-16,-1,29,-14,-15,-3,-4,-5,-6,-7,-8,-9,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'word':([0,1,2,8,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,],[1,8,18,8,21,22,23,24,25,26,27,28,8,8,8,8,8,8,8,8,8,]),'number':([0,1,2,8,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> word","S'",1,None,None,None),
  ('word -> word NEWLINE','word',2,'p_work_newline','parser.py',407),
  ('number -> NUMBER','number',1,'p_number','parser.py',444),
  ('word -> word + word','word',3,'p_arithmetic_binary_operator','parser.py',482),
  ('word -> word - word','word',3,'p_arithmetic_binary_operator','parser.py',483),
  ('word -> word * word','word',3,'p_arithmetic_binary_operator','parser.py',484),
  ('word -> word / word','word',3,'p_arithmetic_binary_operator','parser.py',485),
  ('word -> word % word','word',3,'p_arithmetic_binary_operator','parser.py',486),
  ('word -> word ^ word','word',3,'p_arithmetic_binary_operator','parser.py',487),
  ('word -> word = word','word',3,'p_word_equals_word','parser.py',497),
  ('word -> word NOT_EQUAL word','word',3,'p_word_not_equal','parser.py',502),
  ('word -> ( word )','word',3,'p_word_in_parentheses','parser.py',520),
  ('word -> WORD','word',1,'p_word','parser.py',525),
  ('word -> number','word',1,'p_word_number','parser.py',530),
  ('word -> : WORD','word',2,'p_word_value','parser.py',535),
  ('word -> " WORD','word',2,'p_word_name','parser.py',540),
  ('word -> word word','word',2,'p_word_word','parser.py',545),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',580),
]
