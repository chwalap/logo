
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocMERGE_WORDS_AT_THE_ENDright=NOT_EQUALleft+-left*/%right:"left^left()NEWLINE NOT_EQUAL NUMBER REPEAT WORDprogram : statementsstatements : statements statement\n                  | statementstatement : wordword-list : \'[\'  word-list-statement \']\' word-list-statement : WORD\n                           | number\n                           | word-list-statement WORD\n                           | word-list-statement number\n                           | word-list-statement NEWLINEstatement : REPEAT NUMBER word-list NEWLINEword : word NEWLINEnumber : NUMBERword : word \'+\' word\n            | word \'-\' word\n            | word \'*\' word\n            | word \'/\' word\n            | word \'%\' word\n            | word \'^\' wordword : word \'=\' wordword : word NOT_EQUAL wordword : \'(\' word \')\' word : WORDword : numberword : \':\' WORDword : \'"\' WORDword : word word %prec MERGE_WORDS_AT_THE_ENDempty :'
    
_lr_action_items = {'REPEAT':([0,2,3,4,6,8,9,12,13,14,25,26,27,28,29,30,31,32,33,34,37,38,],[5,5,-3,-4,-13,-23,-24,-2,-27,-12,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-11,]),'(':([0,2,3,4,6,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,37,38,],[7,7,-3,7,-13,7,-23,-24,-2,7,-12,7,7,7,7,7,7,7,7,7,-25,-26,7,7,7,7,7,7,7,7,-22,-11,]),'WORD':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,],[8,8,-3,8,-13,8,-23,-24,25,26,-2,-27,-12,8,8,8,8,8,8,8,8,8,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,40,-22,-11,43,-6,-7,-8,-9,-10,]),':':([0,2,3,4,6,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,37,38,],[10,10,-3,10,-13,10,-23,-24,-2,10,-12,10,10,10,10,10,10,10,10,10,-25,-26,10,10,10,10,10,-19,10,10,-22,-11,]),'"':([0,2,3,4,6,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,37,38,],[11,11,-3,11,-13,11,-23,-24,-2,11,-12,11,11,11,11,11,11,11,11,11,-25,-26,11,11,11,11,11,-19,11,11,-22,-11,]),'NUMBER':([0,2,3,4,5,6,7,8,9,12,13,14,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,],[6,6,-3,6,23,-13,6,-23,-24,-2,-27,-12,6,6,6,6,6,6,6,6,6,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,6,-22,-11,6,-6,-7,-8,-9,-10,]),'$end':([1,2,3,4,6,8,9,12,13,14,25,26,27,28,29,30,31,32,33,34,37,38,],[0,-1,-3,-4,-13,-23,-24,-2,-27,-12,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-11,]),'NEWLINE':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,35,37,39,40,41,42,43,44,45,],[14,-13,-23,-24,-27,-12,14,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,38,-22,45,-6,-7,-5,-8,-9,-10,]),'+':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[15,-13,-23,-24,15,-12,15,-25,-26,-14,-15,-16,-17,-18,-19,15,15,-22,]),'-':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[16,-13,-23,-24,16,-12,16,-25,-26,-14,-15,-16,-17,-18,-19,16,16,-22,]),'*':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[17,-13,-23,-24,17,-12,17,-25,-26,17,17,-16,-17,-18,-19,17,17,-22,]),'/':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[18,-13,-23,-24,18,-12,18,-25,-26,18,18,-16,-17,-18,-19,18,18,-22,]),'%':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[19,-13,-23,-24,19,-12,19,-25,-26,19,19,-16,-17,-18,-19,19,19,-22,]),'^':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[20,-13,-23,-24,20,-12,20,-25,-26,20,20,20,20,20,-19,20,20,-22,]),'=':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[21,-13,-23,-24,21,-12,21,-25,-26,-14,-15,-16,-17,-18,-19,21,21,-22,]),'NOT_EQUAL':([4,6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[22,-13,-23,-24,22,-12,22,-25,-26,-14,-15,-16,-17,-18,-19,22,22,-22,]),')':([6,8,9,13,14,24,25,26,27,28,29,30,31,32,33,34,37,],[-13,-23,-24,-27,-12,37,-25,-26,-14,-15,-16,-17,-18,-19,-20,-21,-22,]),']':([6,39,40,41,43,44,45,],[-13,42,-6,-7,-8,-9,-10,]),'[':([23,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,12,]),'word':([0,2,4,7,13,15,16,17,18,19,20,21,22,24,27,28,29,30,31,32,33,34,],[4,4,13,24,13,27,28,29,30,31,32,33,34,13,13,13,13,13,13,13,13,13,]),'number':([0,2,4,7,13,15,16,17,18,19,20,21,22,24,27,28,29,30,31,32,33,34,36,39,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,41,44,]),'word-list':([23,],[35,]),'word-list-statement':([36,],[39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','lparser.py',337),
  ('statements -> statements statement','statements',2,'p_statements','lparser.py',342),
  ('statements -> statement','statements',1,'p_statements','lparser.py',343),
  ('statement -> word','statement',1,'p_statement','lparser.py',351),
  ('word-list -> [ word-list-statement ]','word-list',3,'p_word_list_empty','lparser.py',356),
  ('word-list-statement -> WORD','word-list-statement',1,'p_word_list_statement','lparser.py',361),
  ('word-list-statement -> number','word-list-statement',1,'p_word_list_statement','lparser.py',362),
  ('word-list-statement -> word-list-statement WORD','word-list-statement',2,'p_word_list_statement','lparser.py',363),
  ('word-list-statement -> word-list-statement number','word-list-statement',2,'p_word_list_statement','lparser.py',364),
  ('word-list-statement -> word-list-statement NEWLINE','word-list-statement',2,'p_word_list_statement','lparser.py',365),
  ('statement -> REPEAT NUMBER word-list NEWLINE','statement',4,'p_repeat','lparser.py',375),
  ('word -> word NEWLINE','word',2,'p_work_newline','lparser.py',386),
  ('number -> NUMBER','number',1,'p_number','lparser.py',423),
  ('word -> word + word','word',3,'p_arithmetic_binary_operator','lparser.py',461),
  ('word -> word - word','word',3,'p_arithmetic_binary_operator','lparser.py',462),
  ('word -> word * word','word',3,'p_arithmetic_binary_operator','lparser.py',463),
  ('word -> word / word','word',3,'p_arithmetic_binary_operator','lparser.py',464),
  ('word -> word % word','word',3,'p_arithmetic_binary_operator','lparser.py',465),
  ('word -> word ^ word','word',3,'p_arithmetic_binary_operator','lparser.py',466),
  ('word -> word = word','word',3,'p_word_equals_word','lparser.py',476),
  ('word -> word NOT_EQUAL word','word',3,'p_word_not_equal','lparser.py',481),
  ('word -> ( word )','word',3,'p_word_in_parentheses','lparser.py',499),
  ('word -> WORD','word',1,'p_word','lparser.py',504),
  ('word -> number','word',1,'p_word_number','lparser.py',509),
  ('word -> : WORD','word',2,'p_word_value','lparser.py',514),
  ('word -> " WORD','word',2,'p_word_name','lparser.py',519),
  ('word -> word word','word',2,'p_word_word','lparser.py',524),
  ('empty -> <empty>','empty',0,'p_empty','lparser.py',559),
]
